Missing third argument 'templateObjectClass' (TO) in constructor of ${tc}.

Reasons: You haven't yet created a Template Object (TO) and/or didn't assign it to ${stbc}.


The Template Object (TO) is the actually implementation for the ${TOA}.


Step 1) Create the TO class
and your TOF (${TOF}) should create an instance of TO (${TO}) for every TOA (@${TOA}).

The proposed name for your test fixture is '${TO}' and I recommended to create the TO as inner class of ${TOF}.
But you could name and place it wherever you like.

So copy this snippets to your TOF (${TOF}):

	/**
	 * ${TOF} creates a {@link ${TO}} from {@link ${TOA}}.
	 */
    @Tests("${tc}")
	public class ${TOF} extends TemplateObjectFactoryBase<${TOA}> {
	    $ommitted

$snippetBegin
		@Override
		protected TemplateObject doCreate(${TOA} annotation) {
			return new ${TO}(annotation);
		}
$snippetEnd

        $ommitted

$snippetBegin
        // Must be public for Velocity!
        @Tests("${tc}")
        public static class ${TO} extends TemplateObjectBase {
            ${TO}(${TOA} annotation) {
                super(annotation);
                // TODO: For each (not standard) annotation element there should be an appropriate field assignment.
            }


            // TODO: Place here your TO's functionality
        }
$snippetEnd
	}

Step 2) Add your TO to your ${tc} and set the generics part of ${tc}.

Use this snippet.

$snippetBegin
    @Subject({${TOA}.class, ${TOF}.class, ${fullTO}.class})
	public class ${tc}
			extends ${stbc}<${TOA}, ${TOF}, ${fullTO}> {
		public ${tc}() {
			super(
				${TOA}.class, // TOA
				${TOF}.class, // TOF
				${fullTO}.class,  // TO
				null          // Test Fixture
			);
		}
	}
$snippetEnd


Step 3) Compile and rerun ${tc}. You will got a new error message, which provides the next steps.


======== end of description =========