/*
 * dataZ - Test Support For Data Stores.
 *
 * Copyright 2014-2017 the original author or authors.
 *
 * All rights reserved. This program and the accompanying materials are
 * made available under the terms of the Eclipse Public License v1.0 which
 * accompanies this distribution and is available at
 *
 * http://www.eclipse.org/legal/epl-v10.html
 */

package org.failearly.dataz.template.generator.support;

import org.failearly.dataz.internal.template.generator.DateEncoder;
import org.failearly.dataz.template.generator.DateUnit;

/**
 * DateTime is the encapsulation for converting the date time in milliseconds to a readable format provided by {@link
 * DateEncoder}. Generated by {@link org.failearly.dataz.template.generator.DateGenerator}. This object is immutable.
 */
public final class DateTime {

    private final DateEncoder encoder;
    private final long dateTimeInMilliSeconds;

    public DateTime(DateEncoder encoder, long dateTimeInMilliSeconds) {
        this.encoder=encoder;
        this.dateTimeInMilliSeconds=dateTimeInMilliSeconds;
    }

    /**
     * The date time in milliseconds.
     *
     * @return date time in milliseconds.
     */
    public long getMilliSeconds() {
        return dateTimeInMilliSeconds;
    }

    @Override
    public String toString() {
        return encoder.toDateString(getMilliSeconds());
    }

    /**
     * Creates a new {@code DateTime} instance which differ from this object in {@code milliseconds}.
     *
     * @param milliseconds number of milliseconds.
     *
     * @return new {@code DateTime} object.
     */
    public DateTime addMilliSeconds(int milliseconds) {
        return new DateTime(this.encoder, add(milliseconds, DateUnit.MILLISECONDS));
    }

    /**
     * Creates a new {@code DateTime} instance which differ from this object in {@code seconds}.
     *
     * @param seconds number of seconds.
     *
     * @return new {@code DateTime} object.
     */
    public DateTime addSeconds(int seconds) {
        return new DateTime(this.encoder, add(seconds, DateUnit.SECONDS));
    }

    /**
     * Creates a new {@code DateTime} instance which differ from this object in {@code minutes}.
     *
     * @param minutes number of minutes.
     *
     * @return new {@code DateTime} object.
     */
    public DateTime addMinutes(int minutes) {
        return new DateTime(this.encoder, add(minutes, DateUnit.MINUTES));
    }

    /**
     * Creates a new {@code DateTime} instance which differ from this object in {@code hours}.
     *
     * @param hours number of hours.
     *
     * @return new {@code DateTime} object.
     */
    public DateTime addHours(int hours) {
        return new DateTime(this.encoder, add(hours, DateUnit.HOURS));
    }

    /**
     * Creates a new {@code DateTime} instance which differ from this object in {@code days}.
     *
     * @param days number of days.
     *
     * @return new {@code DateTime} object.
     */
    public DateTime addDays(int days) {
        return new DateTime(this.encoder, add(days, DateUnit.DAYS));
    }

    /**
     * Creates a new {@code DateTime} instance which differ from this object in {@code weeks}.
     *
     * @param weeks number of weeks.
     *
     * @return new {@code DateTime} object.
     */
    public DateTime addWeeks(int weeks) {
        return new DateTime(this.encoder, add(weeks, DateUnit.WEEKS));
    }

    private long add(int value, DateUnit unit) {
        return this.dateTimeInMilliSeconds + unit.next(value);
    }
}
